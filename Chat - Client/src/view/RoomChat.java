/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import flag.ActionFlags;
import java.util.Observable;
import java.util.Observer;
import core.Client;
import entity.Message;
import entity.Response;
import entity.Room;
import entity.User;
import entity.UserRoom;
import flag.ResultFlags;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author APC-LTN
 */
public class RoomChat extends javax.swing.JFrame implements Observer {

    private Client client;
    private Room room;
    private User user;
    private HomeCenter homeCenter;
    private List<User> listUser = new ArrayList<>();
    
    public RoomChat(Client client, Room room, User user, HomeCenter homeCenter) {
        initComponents();
        this.client = client;
        this.client.addObserver(this);
        this.room = room;
        this.user = user;
        this.homeCenter = homeCenter;
    }

    @Override
    public void update(Observable o, Object arg) {
        Response response = (Response) arg;
        if (response.getResultType().equals(ResultFlags.ERROR)) {
            JOptionPane.showMessageDialog(null, response.getContent(), "Thất bại", JOptionPane.ERROR_MESSAGE);
        } else {
            switch (response.getActionType()) {
                case ActionFlags.SEND_MESSAGE: {
                    Message message = (Message) response.getEntity();
                    if (message.getUser().getDisplayName().equals(user.getDisplayName())) {
                        txtConversation.append(message.getSendTime().toString() + "- You: " + message.getContent() + "\n");
                    } else {
                        txtConversation.append(message.toString() + "\n");
                    }
                    break;
                }
//            case ActionFlags.UPDATE_NUMBER_USER: {
//                String soNguoi = result.content;
//                mSoNguoi = Integer.parseInt(soNguoi);
//                this.setTitle("Nickname: " + client.nickname + "      Tên phòng: " + mTenPhong + "     Mã Phòng: " + mMaPhong + "     Số người: " + mSoNguoi);
//                break;
//            }
//            case ActionFlags.NOTIFY_JUST_JOIN_ROOM: {
//                String userJoin = result.content;
//                txtConversation.append("<" + userJoin + "> vừa tham gia phòng\n");
//                break;
//            }
//            case ActionFlags.NOTIFY_JUST_LEAVE_ROOM: {
//                String userJoin = result.content;
//                txtConversation.append("<" + userJoin + "> vừa rời phòng\n");
//                break;
//            }
//        }
            }
        }
    }
    
    private void FillListUser(Room room){
        DefaultTableModel tm = (DefaultTableModel) tbMembers.getModel();
        tm.setRowCount(0);
        listUser.clear();
        room.getListUserRoom().stream().map(userRoom -> userRoom.getUser()).forEachOrdered(userr -> {
            tm.addRow(userr.toObjects());
            listUser.add(userr);
        });
    }
    
    private void FillMessages(Room room) {
        room.getListMessage().forEach(message -> {
            if (message.getUser().getDisplayName().equals(user.getDisplayName())) {
                txtConversation.append(message.getSendTime() + "- You: " + message.getContent() + "\n");
            } else {
                txtConversation.append(message.toString() + "\n");
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtConversation = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();
        btnSend = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbMembers = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jLabel4.setText("Add Member");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        txtConversation.setEditable(false);
        txtConversation.setColumns(20);
        txtConversation.setRows(5);
        jScrollPane1.setViewportView(txtConversation);

        txtChat.setColumns(20);
        txtChat.setRows(5);
        jScrollPane2.setViewportView(txtChat);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jLabel1.setText("Chat");

        jLabel2.setText("Room Name");

        tbMembers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Active"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbMembers);

        jLabel3.setText("Members");

        jLabel5.setText("Username you want to add");

        jButton1.setText("Add");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jScrollPane2)
                            .addGap(18, 18, 18)
                            .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 589, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(0, 60, Short.MAX_VALUE))
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(144, 144, 144))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        this.setTitle("Nickname: " + user.getDisplayName() + " Tên phòng: " + room.getDescription() + " Số người: " + room.getListUserRoom().size());
        FillMessages(room);
        FillListUser(room);
    }//GEN-LAST:event_formWindowOpened

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed
        // TODO add your handling code here:
        if (txtChat.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập tin nhắn", "Chưa nhập tin nhắn", JOptionPane.WARNING_MESSAGE);
            txtChat.requestFocus();
            return;
        }
        Message message = new Message();
        message.setContent(txtChat.getText());
        txtChat.setText("");
        message.setUser(user);
        message.setSendTime(new Date());
        List<Message> messages = room.getListMessage();
        messages.add(message);
        room.setListMessage(messages);
        client.userController.sendMessage(room);
    }//GEN-LAST:event_btnSendActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
//        client.leaveRoom();
        client.userController.listRoomOpened.remove((Integer)room.getId());
        System.out.println(client.userController.listRoomOpened.size());
        client.deleteObserver(this);
//        client.addObserver(homeCenter);
//        homeCenter.setVisible(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSend;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTable tbMembers;
    private javax.swing.JTextArea txtChat;
    private javax.swing.JTextArea txtConversation;
    // End of variables declaration//GEN-END:variables
}
